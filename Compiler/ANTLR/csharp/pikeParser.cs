//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from pike.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class pikeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		IDENTIFIER=53, LETTER=54, FLOAT=55, NUMBER=56, DIGIT=57, STRING=58, WS=59, 
		COMMENT=60, LINE_COMMENT=61;
	public const int
		RULE_program = 0, RULE_definition = 1, RULE_function_definition = 2, RULE_variables = 3, 
		RULE_variable_names = 4, RULE_variable_name = 5, RULE_block = 6, RULE_statement = 7, 
		RULE_cond = 8, RULE_while_stmt = 9, RULE_do_while_stmt = 10, RULE_for_stmt = 11, 
		RULE_switch_stmt = 12, RULE_case_stmt = 13, RULE_default_stmt = 14, RULE_foreach_stmt = 15, 
		RULE_break_stmt = 16, RULE_continue_stmt = 17, RULE_expression = 18, RULE_expression2 = 19, 
		RULE_expression5 = 20, RULE_expression6 = 21, RULE_extension = 22, RULE_parenthesis = 23, 
		RULE_expression_list = 24, RULE_splice_expression = 25, RULE_argument = 26, 
		RULE_arguments = 27, RULE_type_ = 28, RULE_function_type = 29;
	public static readonly string[] ruleNames = {
		"program", "definition", "function_definition", "variables", "variable_names", 
		"variable_name", "block", "statement", "cond", "while_stmt", "do_while_stmt", 
		"for_stmt", "switch_stmt", "case_stmt", "default_stmt", "foreach_stmt", 
		"break_stmt", "continue_stmt", "expression", "expression2", "expression5", 
		"expression6", "extension", "parenthesis", "expression_list", "splice_expression", 
		"argument", "arguments", "type_", "function_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "';'", "','", "'*'", "'='", "'{'", "'}'", "'if'", 
		"'else'", "'while'", "'do'", "'for'", "'switch'", "'case'", "'..'", "':'", 
		"'default'", "'foreach'", "'break'", "'continue'", "'||'", "'&&'", "'|'", 
		"'^'", "'&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'<<'", "'>>'", 
		"'+'", "'/'", "'%'", "'--'", "'++'", "'->'", "'['", "']'", "'@'", "'...'", 
		"'int'", "'string'", "'float'", "'program'", "'mapping'", "'array'", "'multiset'", 
		"'function'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "IDENTIFIER", "LETTER", "FLOAT", "NUMBER", 
		"DIGIT", "STRING", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "pike.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static pikeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public pikeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public pikeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
				{
				{
				State = 60;
				definition();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables() {
			return GetRuleContext<VariablesContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 2, RULE_definition);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				function_definition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				variables();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pikeParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			type_();
			State = 71;
			Match(IDENTIFIER);
			State = 72;
			Match(T__0);
			State = 73;
			arguments();
			State = 74;
			Match(T__1);
			State = 75;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_namesContext variable_names() {
			return GetRuleContext<Variable_namesContext>(0);
		}
		public VariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariablesContext variables() {
		VariablesContext _localctx = new VariablesContext(Context, State);
		EnterRule(_localctx, 6, RULE_variables);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			type_();
			State = 78;
			variable_names();
			State = 79;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_namesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext[] variable_name() {
			return GetRuleContexts<Variable_nameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Variable_nameContext variable_name(int i) {
			return GetRuleContext<Variable_nameContext>(i);
		}
		public Variable_namesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_names; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterVariable_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitVariable_names(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_names(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_namesContext variable_names() {
		Variable_namesContext _localctx = new Variable_namesContext(Context, State);
		EnterRule(_localctx, 8, RULE_variable_names);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			variable_name();
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 82;
				Match(T__3);
				State = 83;
				variable_name();
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pikeParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitVariable_name(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 10, RULE_variable_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4) {
				{
				{
				State = 89;
				Match(T__4);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 95;
			Match(IDENTIFIER);
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 96;
				Match(T__5);
				State = 97;
				expression2();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__6);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__6) | (1L << T__8) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__37) | (1L << T__38) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << FLOAT) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				{
				State = 101;
				statement();
				}
				}
				State = 106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 107;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CondContext cond() {
			return GetRuleContext<CondContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Do_while_stmtContext do_while_stmt() {
			return GetRuleContext<Do_while_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Switch_stmtContext switch_stmt() {
			return GetRuleContext<Switch_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Case_stmtContext case_stmt() {
			return GetRuleContext<Case_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Default_stmtContext default_stmt() {
			return GetRuleContext<Default_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Foreach_stmtContext foreach_stmt() {
			return GetRuleContext<Foreach_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Break_stmtContext break_stmt() {
			return GetRuleContext<Break_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Continue_stmtContext continue_stmt() {
			return GetRuleContext<Continue_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariablesContext variables() {
			return GetRuleContext<VariablesContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_statement);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__37:
			case T__38:
			case FLOAT:
			case NUMBER:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				expression2();
				State = 110;
				Match(T__2);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				cond();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 113;
				while_stmt();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 114;
				do_while_stmt();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 115;
				for_stmt();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 116;
				switch_stmt();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 7);
				{
				State = 117;
				case_stmt();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 8);
				{
				State = 118;
				default_stmt();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 9);
				{
				State = 119;
				block();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 10);
				{
				State = 120;
				foreach_stmt();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 11);
				{
				State = 121;
				break_stmt();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 12);
				{
				State = 122;
				continue_stmt();
				}
				break;
			case T__44:
			case T__45:
			case T__46:
			case T__47:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
				EnterOuterAlt(_localctx, 13);
				{
				State = 123;
				variables();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 14);
				{
				State = 124;
				Match(T__2);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public CondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cond; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitCond(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CondContext cond() {
		CondContext _localctx = new CondContext(Context, State);
		EnterRule(_localctx, 16, RULE_cond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(T__8);
			State = 128;
			Match(T__0);
			State = 129;
			expression2();
			State = 130;
			Match(T__1);
			State = 131;
			block();
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 132;
				Match(T__9);
				State = 133;
				statement();
				State = 134;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public While_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitWhile_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_stmtContext while_stmt() {
		While_stmtContext _localctx = new While_stmtContext(Context, State);
		EnterRule(_localctx, 18, RULE_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(T__10);
			State = 139;
			Match(T__0);
			State = 140;
			expression();
			State = 141;
			Match(T__1);
			State = 142;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_while_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public While_stmtContext while_stmt() {
			return GetRuleContext<While_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Do_while_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_while_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterDo_while_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitDo_while_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_while_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_while_stmtContext do_while_stmt() {
		Do_while_stmtContext _localctx = new Do_while_stmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_do_while_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			Match(T__11);
			State = 145;
			statement();
			State = 146;
			while_stmt();
			State = 147;
			Match(T__0);
			State = 148;
			expression();
			State = 149;
			Match(T__1);
			State = 150;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitFor_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 22, RULE_for_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			Match(T__12);
			State = 153;
			Match(T__0);
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__37) | (1L << T__38) | (1L << FLOAT) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 154;
				expression();
				}
			}

			State = 157;
			Match(T__2);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__37) | (1L << T__38) | (1L << FLOAT) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 158;
				expression();
				}
			}

			State = 161;
			Match(T__2);
			State = 163;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__37) | (1L << T__38) | (1L << FLOAT) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 162;
				expression();
				}
			}

			State = 165;
			Match(T__1);
			State = 166;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Switch_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterSwitch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitSwitch_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_stmtContext switch_stmt() {
		Switch_stmtContext _localctx = new Switch_stmtContext(Context, State);
		EnterRule(_localctx, 24, RULE_switch_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__13);
			State = 169;
			Match(T__0);
			State = 170;
			expression();
			State = 171;
			Match(T__1);
			State = 172;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Case_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Case_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_case_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterCase_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitCase_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCase_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Case_stmtContext case_stmt() {
		Case_stmtContext _localctx = new Case_stmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_case_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 174;
			Match(T__14);
			State = 175;
			expression();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 176;
				Match(T__15);
				State = 177;
				expression();
				}
			}

			State = 180;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_stmtContext : ParserRuleContext {
		public Default_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterDefault_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitDefault_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_stmtContext default_stmt() {
		Default_stmtContext _localctx = new Default_stmtContext(Context, State);
		EnterRule(_localctx, 28, RULE_default_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(T__17);
			State = 183;
			Match(T__16);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression6Context expression6() {
			return GetRuleContext<Expression6Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Foreach_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterForeach_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitForeach_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_stmtContext foreach_stmt() {
		Foreach_stmtContext _localctx = new Foreach_stmtContext(Context, State);
		EnterRule(_localctx, 30, RULE_foreach_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(T__18);
			State = 186;
			Match(T__0);
			State = 187;
			expression();
			State = 188;
			Match(T__16);
			State = 189;
			expression6();
			State = 190;
			Match(T__1);
			State = 191;
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_stmtContext : ParserRuleContext {
		public Break_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitBreak_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_stmtContext break_stmt() {
		Break_stmtContext _localctx = new Break_stmtContext(Context, State);
		EnterRule(_localctx, 32, RULE_break_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			Match(T__19);
			State = 194;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_stmtContext : ParserRuleContext {
		public Continue_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_stmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitContinue_stmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_stmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_stmtContext continue_stmt() {
		Continue_stmtContext _localctx = new Continue_stmtContext(Context, State);
		EnterRule(_localctx, 34, RULE_continue_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			Match(T__20);
			State = 197;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context[] expression2() {
			return GetRuleContexts<Expression2Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2(int i) {
			return GetRuleContext<Expression2Context>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			expression2();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 200;
				Match(T__3);
				State = 201;
				expression2();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression2Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression5Context[] expression5() {
			return GetRuleContexts<Expression5Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression5Context expression5(int i) {
			return GetRuleContext<Expression5Context>(i);
		}
		public Expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression2; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterExpression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitExpression2(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression2Context expression2() {
		Expression2Context _localctx = new Expression2Context(Context, State);
		EnterRule(_localctx, 38, RULE_expression2);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 207;
					expression5();
					State = 208;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					} 
				}
				State = 214;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 215;
			expression5();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression5Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression6Context expression6() {
			return GetRuleContext<Expression6Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression5Context expression5() {
			return GetRuleContext<Expression5Context>(0);
		}
		public Expression5Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression5; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterExpression5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitExpression5(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression5(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression5Context expression5() {
		Expression5Context _localctx = new Expression5Context(Context, State);
		EnterRule(_localctx, 40, RULE_expression5);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 217;
				expression6();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 218;
				Match(T__0);
				State = 219;
				type_();
				State = 220;
				Match(T__1);
				State = 221;
				expression5();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 223;
				Match(T__37);
				State = 224;
				expression6();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 225;
				Match(T__38);
				State = 226;
				expression6();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 227;
				expression6();
				State = 228;
				Match(T__37);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 230;
				expression6();
				State = 231;
				Match(T__38);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression6Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(pikeParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(pikeParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(pikeParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesisContext parenthesis() {
			return GetRuleContext<ParenthesisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext[] extension() {
			return GetRuleContexts<ExtensionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExtensionContext extension(int i) {
			return GetRuleContext<ExtensionContext>(i);
		}
		public Expression6Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression6; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterExpression6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitExpression6(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression6(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression6Context expression6() {
		Expression6Context _localctx = new Expression6Context(Context, State);
		EnterRule(_localctx, 42, RULE_expression6);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				{
				State = 235;
				Match(STRING);
				}
				break;
			case NUMBER:
				{
				State = 236;
				Match(NUMBER);
				}
				break;
			case FLOAT:
				{
				State = 237;
				Match(FLOAT);
				}
				break;
			case T__0:
				{
				State = 238;
				parenthesis();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__39) | (1L << T__40))) != 0)) {
				{
				{
				State = 241;
				extension();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pikeParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extension; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitExtension(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionContext extension() {
		ExtensionContext _localctx = new ExtensionContext(Context, State);
		EnterRule(_localctx, 44, RULE_extension);
		int _la;
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 247;
				Match(T__0);
				State = 248;
				expression_list();
				State = 249;
				Match(T__1);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 2);
				{
				State = 251;
				Match(T__39);
				State = 252;
				Match(IDENTIFIER);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 3);
				{
				State = 253;
				Match(T__40);
				State = 254;
				expression();
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__15) {
					{
					State = 255;
					Match(T__15);
					State = 256;
					expression();
					}
				}

				State = 259;
				Match(T__41);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitParenthesis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesis(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesisContext parenthesis() {
		ParenthesisContext _localctx = new ParenthesisContext(Context, State);
		EnterRule(_localctx, 46, RULE_parenthesis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263;
			Match(T__0);
			State = 264;
			expression();
			State = 265;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Splice_expressionContext[] splice_expression() {
			return GetRuleContexts<Splice_expressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Splice_expressionContext splice_expression(int i) {
			return GetRuleContext<Splice_expressionContext>(i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 48, RULE_expression_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__37) | (1L << T__38) | (1L << T__42) | (1L << FLOAT) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 267;
				splice_expression();
				State = 272;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 268;
						Match(T__3);
						State = 269;
						splice_expression();
						}
						} 
					}
					State = 274;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
			}

			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 277;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Splice_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression2Context expression2() {
			return GetRuleContext<Expression2Context>(0);
		}
		public Splice_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_splice_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterSplice_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitSplice_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSplice_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Splice_expressionContext splice_expression() {
		Splice_expressionContext _localctx = new Splice_expressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_splice_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__42) {
				{
				State = 280;
				Match(T__42);
				}
			}

			State = 283;
			expression2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(pikeParser.IDENTIFIER, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 52, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			type_();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43) {
				{
				State = 286;
				Match(T__43);
				}
			}

			State = 290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 289;
				Match(IDENTIFIER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 54, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0)) {
				{
				State = 292;
				argument();
				State = 297;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 293;
						Match(T__3);
						State = 294;
						argument();
						}
						} 
					}
					State = 299;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
				}
				}
			}

			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 302;
				Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_typeContext function_type() {
			return GetRuleContext<Function_typeContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 56, RULE_type_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 336;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__44:
				{
				State = 305;
				Match(T__44);
				}
				break;
			case T__45:
				{
				State = 306;
				Match(T__45);
				}
				break;
			case T__46:
				{
				State = 307;
				Match(T__46);
				}
				break;
			case T__47:
				{
				State = 308;
				Match(T__47);
				}
				break;
			case T__48:
				{
				{
				State = 309;
				Match(T__48);
				State = 316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 310;
					Match(T__0);
					State = 311;
					type_();
					State = 312;
					Match(T__16);
					State = 313;
					type_();
					State = 314;
					Match(T__1);
					}
				}

				}
				}
				break;
			case T__49:
				{
				{
				State = 318;
				Match(T__49);
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 319;
					Match(T__0);
					State = 320;
					type_();
					State = 321;
					Match(T__1);
					}
				}

				}
				}
				break;
			case T__50:
				{
				{
				State = 325;
				Match(T__50);
				State = 330;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 326;
					Match(T__0);
					State = 327;
					type_();
					State = 328;
					Match(T__1);
					}
				}

				}
				}
				break;
			case T__51:
				{
				{
				State = 332;
				Match(T__51);
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__0) {
					{
					State = 333;
					function_type();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 341;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 338;
					Match(T__4);
					}
					} 
				}
				State = 343;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context[] type_() {
			return GetRuleContexts<Type_Context>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Type_Context type_(int i) {
			return GetRuleContext<Type_Context>(i);
		}
		public Function_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.EnterFunction_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IpikeListener typedListener = listener as IpikeListener;
			if (typedListener != null) typedListener.ExitFunction_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IpikeVisitor<TResult> typedVisitor = visitor as IpikeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_typeContext function_type() {
		Function_typeContext _localctx = new Function_typeContext(Context, State);
		EnterRule(_localctx, 58, RULE_function_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 344;
			Match(T__0);
			State = 345;
			type_();
			State = 350;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 346;
				Match(T__3);
				State = 347;
				type_();
				}
				}
				State = 352;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__43) {
				{
				State = 353;
				Match(T__43);
				}
			}

			State = 356;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '?', '\x169', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x43', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'G', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'W', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'Z', '\v', '\x6', '\x3', '\a', 
		'\a', '\a', ']', '\n', '\a', '\f', '\a', '\xE', '\a', '`', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x65', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\a', '\b', 'i', '\n', '\b', '\f', '\b', '\xE', 
		'\b', 'l', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x80', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x8B', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x9E', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xA2', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xA6', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xB5', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\xCD', 
		'\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xD0', '\v', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', '\xD5', '\n', '\x15', 
		'\f', '\x15', '\xE', '\x15', '\xD8', '\v', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x5', '\x16', '\xEC', '\n', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\xF2', '\n', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\xF5', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\xF8', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x104', '\n', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x108', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x111', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x114', '\v', '\x1A', '\x5', '\x1A', '\x116', '\n', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x119', '\n', '\x1A', '\x3', '\x1B', '\x5', 
		'\x1B', '\x11C', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x122', '\n', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x125', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\a', '\x1D', '\x12A', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x12D', 
		'\v', '\x1D', '\x5', '\x1D', '\x12F', '\n', '\x1D', '\x3', '\x1D', '\x5', 
		'\x1D', '\x132', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x13F', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x146', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x14D', '\n', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x151', '\n', '\x1E', 
		'\x5', '\x1E', '\x153', '\n', '\x1E', '\x3', '\x1E', '\a', '\x1E', '\x156', 
		'\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x159', '\v', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x15F', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x162', '\v', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x165', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\x2', '\x2', ' ', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '\x2', '\x3', '\x4', '\x2', '\a', '\a', '\x18', '\'', 
		'\x2', '\x187', '\x2', '\x41', '\x3', '\x2', '\x2', '\x2', '\x4', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 
		'O', '\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\f', '^', '\x3', '\x2', '\x2', '\x2', '\xE', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x12', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x18', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xAA', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xB8', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\"', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xC6', '\x3', '\x2', '\x2', '\x2', '&', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xD6', '\x3', '\x2', '\x2', '\x2', '*', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF1', '\x3', '\x2', '\x2', '\x2', '.', '\x107', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x115', '\x3', '\x2', '\x2', '\x2', '\x34', '\x11B', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x15A', '\x3', '\x2', '\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', 
		'\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x5', '\x6', 
		'\x4', '\x2', '\x45', 'G', '\x5', '\b', '\x5', '\x2', '\x46', '\x44', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x45', '\x3', '\x2', '\x2', '\x2', 
		'G', '\x5', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', ':', '\x1E', 
		'\x2', 'I', 'J', '\a', '\x37', '\x2', '\x2', 'J', 'K', '\a', '\x3', '\x2', 
		'\x2', 'K', 'L', '\x5', '\x38', '\x1D', '\x2', 'L', 'M', '\a', '\x4', 
		'\x2', '\x2', 'M', 'N', '\x5', '\xE', '\b', '\x2', 'N', '\a', '\x3', '\x2', 
		'\x2', '\x2', 'O', 'P', '\x5', ':', '\x1E', '\x2', 'P', 'Q', '\x5', '\n', 
		'\x6', '\x2', 'Q', 'R', '\a', '\x5', '\x2', '\x2', 'R', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'S', 'X', '\x5', '\f', '\a', '\x2', 'T', 'U', '\a', '\x6', 
		'\x2', '\x2', 'U', 'W', '\x5', '\f', '\a', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 'V', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 'Y', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', ']', '\a', 
		'\a', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', '\x2', '`', 
		'^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x64', '\a', '\x37', '\x2', 
		'\x2', '\x62', '\x63', '\a', '\b', '\x2', '\x2', '\x63', '\x65', '\x5', 
		'(', '\x15', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'j', '\a', '\t', '\x2', '\x2', 'g', 'i', '\x5', '\x10', 
		'\t', '\x2', 'h', 'g', '\x3', '\x2', '\x2', '\x2', 'i', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'm', '\x3', '\x2', '\x2', '\x2', 'l', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\a', '\n', '\x2', '\x2', 'n', '\xF', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x5', '(', '\x15', '\x2', 'p', 'q', '\a', '\x5', 
		'\x2', '\x2', 'q', '\x80', '\x3', '\x2', '\x2', '\x2', 'r', '\x80', '\x5', 
		'\x12', '\n', '\x2', 's', '\x80', '\x5', '\x14', '\v', '\x2', 't', '\x80', 
		'\x5', '\x16', '\f', '\x2', 'u', '\x80', '\x5', '\x18', '\r', '\x2', 'v', 
		'\x80', '\x5', '\x1A', '\xE', '\x2', 'w', '\x80', '\x5', '\x1C', '\xF', 
		'\x2', 'x', '\x80', '\x5', '\x1E', '\x10', '\x2', 'y', '\x80', '\x5', 
		'\xE', '\b', '\x2', 'z', '\x80', '\x5', ' ', '\x11', '\x2', '{', '\x80', 
		'\x5', '\"', '\x12', '\x2', '|', '\x80', '\x5', '$', '\x13', '\x2', '}', 
		'\x80', '\x5', '\b', '\x5', '\x2', '~', '\x80', '\a', '\x5', '\x2', '\x2', 
		'\x7F', 'o', '\x3', '\x2', '\x2', '\x2', '\x7F', 'r', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', 's', '\x3', '\x2', '\x2', '\x2', '\x7F', 't', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', 'u', '\x3', '\x2', '\x2', '\x2', '\x7F', 'v', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', 'w', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'x', '\x3', '\x2', '\x2', '\x2', '\x7F', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x7F', 'z', '\x3', '\x2', '\x2', '\x2', '\x7F', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '\v', '\x2', '\x2', 
		'\x82', '\x83', '\a', '\x3', '\x2', '\x2', '\x83', '\x84', '\x5', '(', 
		'\x15', '\x2', '\x84', '\x85', '\a', '\x4', '\x2', '\x2', '\x85', '\x8A', 
		'\x5', '\xE', '\b', '\x2', '\x86', '\x87', '\a', '\f', '\x2', '\x2', '\x87', 
		'\x88', '\x5', '\x10', '\t', '\x2', '\x88', '\x89', '\x5', '\xE', '\b', 
		'\x2', '\x89', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\r', '\x2', 
		'\x2', '\x8D', '\x8E', '\a', '\x3', '\x2', '\x2', '\x8E', '\x8F', '\x5', 
		'&', '\x14', '\x2', '\x8F', '\x90', '\a', '\x4', '\x2', '\x2', '\x90', 
		'\x91', '\x5', '\x10', '\t', '\x2', '\x91', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x93', '\a', '\xE', '\x2', '\x2', '\x93', '\x94', '\x5', 
		'\x10', '\t', '\x2', '\x94', '\x95', '\x5', '\x14', '\v', '\x2', '\x95', 
		'\x96', '\a', '\x3', '\x2', '\x2', '\x96', '\x97', '\x5', '&', '\x14', 
		'\x2', '\x97', '\x98', '\a', '\x4', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\x5', '\x2', '\x2', '\x99', '\x17', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '\xF', '\x2', '\x2', '\x9B', '\x9D', '\a', '\x3', '\x2', 
		'\x2', '\x9C', '\x9E', '\x5', '&', '\x14', '\x2', '\x9D', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA1', '\a', '\x5', '\x2', 
		'\x2', '\xA0', '\xA2', '\x5', '&', '\x14', '\x2', '\xA1', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA5', '\a', '\x5', '\x2', 
		'\x2', '\xA4', '\xA6', '\x5', '&', '\x14', '\x2', '\xA5', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA6', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x4', '\x2', 
		'\x2', '\xA8', '\xA9', '\x5', '\x10', '\t', '\x2', '\xA9', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\xAA', '\xAB', '\a', '\x10', '\x2', '\x2', '\xAB', 
		'\xAC', '\a', '\x3', '\x2', '\x2', '\xAC', '\xAD', '\x5', '&', '\x14', 
		'\x2', '\xAD', '\xAE', '\a', '\x4', '\x2', '\x2', '\xAE', '\xAF', '\x5', 
		'\xE', '\b', '\x2', '\xAF', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB1', '\a', '\x11', '\x2', '\x2', '\xB1', '\xB4', '\x5', '&', '\x14', 
		'\x2', '\xB2', '\xB3', '\a', '\x12', '\x2', '\x2', '\xB3', '\xB5', '\x5', 
		'&', '\x14', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\a', '\x13', '\x2', '\x2', '\xB7', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x14', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\x13', '\x2', '\x2', '\xBA', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\a', '\x15', '\x2', '\x2', '\xBC', '\xBD', '\a', 
		'\x3', '\x2', '\x2', '\xBD', '\xBE', '\x5', '&', '\x14', '\x2', '\xBE', 
		'\xBF', '\a', '\x13', '\x2', '\x2', '\xBF', '\xC0', '\x5', ',', '\x17', 
		'\x2', '\xC0', '\xC1', '\a', '\x4', '\x2', '\x2', '\xC1', '\xC2', '\x5', 
		'\x10', '\t', '\x2', '\xC2', '!', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x16', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x5', '\x2', 
		'\x2', '\xC5', '#', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', 
		'\x17', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x5', '\x2', '\x2', '\xC8', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCE', '\x5', '(', '\x15', '\x2', 
		'\xCA', '\xCB', '\a', '\x6', '\x2', '\x2', '\xCB', '\xCD', '\x5', '(', 
		'\x15', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xCF', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xD0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', 
		'\x5', '*', '\x16', '\x2', '\xD2', '\xD3', '\t', '\x2', '\x2', '\x2', 
		'\xD3', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD9', '\xDA', '\x5', '*', '\x16', '\x2', '\xDA', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xDB', '\xEC', '\x5', ',', '\x17', '\x2', 
		'\xDC', '\xDD', '\a', '\x3', '\x2', '\x2', '\xDD', '\xDE', '\x5', ':', 
		'\x1E', '\x2', '\xDE', '\xDF', '\a', '\x4', '\x2', '\x2', '\xDF', '\xE0', 
		'\x5', '*', '\x16', '\x2', '\xE0', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xE2', '\a', '(', '\x2', '\x2', '\xE2', '\xEC', '\x5', ',', '\x17', 
		'\x2', '\xE3', '\xE4', '\a', ')', '\x2', '\x2', '\xE4', '\xEC', '\x5', 
		',', '\x17', '\x2', '\xE5', '\xE6', '\x5', ',', '\x17', '\x2', '\xE6', 
		'\xE7', '\a', '(', '\x2', '\x2', '\xE7', '\xEC', '\x3', '\x2', '\x2', 
		'\x2', '\xE8', '\xE9', '\x5', ',', '\x17', '\x2', '\xE9', '\xEA', '\a', 
		')', '\x2', '\x2', '\xEA', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xDB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xDC', '\x3', '\x2', '\x2', 
		'\x2', '\xEB', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE3', '\x3', 
		'\x2', '\x2', '\x2', '\xEB', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xEB', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xEC', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xED', '\xF2', '\a', '<', '\x2', '\x2', '\xEE', '\xF2', '\a', 
		':', '\x2', '\x2', '\xEF', '\xF2', '\a', '\x39', '\x2', '\x2', '\xF0', 
		'\xF2', '\x5', '\x30', '\x19', '\x2', '\xF1', '\xED', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEF', '\x3', 
		'\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', '\x5', '.', '\x18', 
		'\x2', '\xF4', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF8', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF6', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', 
		'\x3', '\x2', '\x2', '\xFA', '\xFB', '\x5', '\x32', '\x1A', '\x2', '\xFB', 
		'\xFC', '\a', '\x4', '\x2', '\x2', '\xFC', '\x108', '\x3', '\x2', '\x2', 
		'\x2', '\xFD', '\xFE', '\a', '*', '\x2', '\x2', '\xFE', '\x108', '\a', 
		'\x37', '\x2', '\x2', '\xFF', '\x100', '\a', '+', '\x2', '\x2', '\x100', 
		'\x103', '\x5', '&', '\x14', '\x2', '\x101', '\x102', '\a', '\x12', '\x2', 
		'\x2', '\x102', '\x104', '\x5', '&', '\x14', '\x2', '\x103', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\a', 
		',', '\x2', '\x2', '\x106', '\x108', '\x3', '\x2', '\x2', '\x2', '\x107', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\x107', '\xFD', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x108', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x3', '\x2', '\x2', '\x10A', 
		'\x10B', '\x5', '&', '\x14', '\x2', '\x10B', '\x10C', '\a', '\x4', '\x2', 
		'\x2', '\x10C', '\x31', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x112', 
		'\x5', '\x34', '\x1B', '\x2', '\x10E', '\x10F', '\a', '\x6', '\x2', '\x2', 
		'\x10F', '\x111', '\x5', '\x34', '\x1B', '\x2', '\x110', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x111', '\x114', '\x3', '\x2', '\x2', '\x2', '\x112', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x116', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x116', '\x3', '\x2', '\x2', '\x2', '\x116', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x119', '\a', '\x6', '\x2', '\x2', '\x118', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x33', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', 
		'\a', '-', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\x5', '(', '\x15', '\x2', '\x11E', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x121', '\x5', ':', '\x1E', 
		'\x2', '\x120', '\x122', '\a', '.', '\x2', '\x2', '\x121', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x122', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x123', '\x125', '\a', '\x37', '\x2', 
		'\x2', '\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x12B', '\x5', '\x36', '\x1C', '\x2', '\x127', '\x128', '\a', 
		'\x6', '\x2', '\x2', '\x128', '\x12A', '\x5', '\x36', '\x1C', '\x2', '\x129', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x12D', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x12E', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x131', '\x3', '\x2', '\x2', '\x2', '\x130', '\x132', '\a', '\x6', '\x2', 
		'\x2', '\x131', '\x130', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x39', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x153', '\a', '/', '\x2', '\x2', '\x134', '\x153', '\a', '\x30', 
		'\x2', '\x2', '\x135', '\x153', '\a', '\x31', '\x2', '\x2', '\x136', '\x153', 
		'\a', '\x32', '\x2', '\x2', '\x137', '\x13E', '\a', '\x33', '\x2', '\x2', 
		'\x138', '\x139', '\a', '\x3', '\x2', '\x2', '\x139', '\x13A', '\x5', 
		':', '\x1E', '\x2', '\x13A', '\x13B', '\a', '\x13', '\x2', '\x2', '\x13B', 
		'\x13C', '\x5', ':', '\x1E', '\x2', '\x13C', '\x13D', '\a', '\x4', '\x2', 
		'\x2', '\x13D', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13F', '\x153', '\x3', '\x2', '\x2', '\x2', '\x140', '\x145', '\a', 
		'\x34', '\x2', '\x2', '\x141', '\x142', '\a', '\x3', '\x2', '\x2', '\x142', 
		'\x143', '\x5', ':', '\x1E', '\x2', '\x143', '\x144', '\a', '\x4', '\x2', 
		'\x2', '\x144', '\x146', '\x3', '\x2', '\x2', '\x2', '\x145', '\x141', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x153', '\x3', '\x2', '\x2', '\x2', '\x147', '\x14C', '\a', 
		'\x35', '\x2', '\x2', '\x148', '\x149', '\a', '\x3', '\x2', '\x2', '\x149', 
		'\x14A', '\x5', ':', '\x1E', '\x2', '\x14A', '\x14B', '\a', '\x4', '\x2', 
		'\x2', '\x14B', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'\x14D', '\x153', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x150', '\a', 
		'\x36', '\x2', '\x2', '\x14F', '\x151', '\x5', '<', '\x1F', '\x2', '\x150', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x150', '\x151', '\x3', '\x2', '\x2', 
		'\x2', '\x151', '\x153', '\x3', '\x2', '\x2', '\x2', '\x152', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x152', '\x134', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x135', '\x3', '\x2', '\x2', '\x2', '\x152', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x152', '\x137', '\x3', '\x2', '\x2', '\x2', '\x152', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x152', '\x147', '\x3', '\x2', '\x2', 
		'\x2', '\x152', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x153', '\x157', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x156', '\a', '\a', '\x2', '\x2', 
		'\x155', '\x154', '\x3', '\x2', '\x2', '\x2', '\x156', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', 
		'\x158', '\x3', '\x2', '\x2', '\x2', '\x158', ';', '\x3', '\x2', '\x2', 
		'\x2', '\x159', '\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', 
		'\a', '\x3', '\x2', '\x2', '\x15B', '\x160', '\x5', ':', '\x1E', '\x2', 
		'\x15C', '\x15D', '\a', '\x6', '\x2', '\x2', '\x15D', '\x15F', '\x5', 
		':', '\x1E', '\x2', '\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x165', '\a', '.', '\x2', '\x2', '\x164', '\x163', '\x3', '\x2', 
		'\x2', '\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\a', '\x4', '\x2', '\x2', 
		'\x167', '=', '\x3', '\x2', '\x2', '\x2', '&', '\x41', '\x46', 'X', '^', 
		'\x64', 'j', '\x7F', '\x8A', '\x9D', '\xA1', '\xA5', '\xB4', '\xCE', '\xD6', 
		'\xEB', '\xF1', '\xF6', '\x103', '\x107', '\x112', '\x115', '\x118', '\x11B', 
		'\x121', '\x124', '\x12B', '\x12E', '\x131', '\x13E', '\x145', '\x14C', 
		'\x150', '\x152', '\x157', '\x160', '\x164',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
