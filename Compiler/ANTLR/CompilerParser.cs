//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Compiler.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class CompilerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		TRUE=32, FALSE=33, ASTERISK=34, SLASH=35, New_Line=36, Comment=37, Whitespace=38, 
		Integer_Literal=39, Real_Literal=40, String_Literal=41;
	public const int
		RULE_input = 0, RULE_input_section = 1, RULE_input_section_part = 2, RULE_input_element = 3, 
		RULE_token = 4, RULE_keyword = 5, RULE_literal = 6, RULE_boolean_literal = 7, 
		RULE_operator_or_punctuator = 8;
	public static readonly string[] ruleNames = {
		"input", "input_section", "input_section_part", "input_element", "token", 
		"keyword", "literal", "boolean_literal", "operator_or_punctuator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'bool'", "'break'", "'continue'", "'do'", "'double'", "'else'", 
		"'for'", "'if'", "'int'", "'return'", "'string'", "'void'", "'while'", 
		"'{'", "'}'", "'('", "')'", "'.'", "','", "';'", "'+'", "'-'", "'='", 
		"'<'", "'>'", "'&&'", "'||'", "'=='", "'!='", "'<='", "'>='", "'true'", 
		"'false'", "'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "TRUE", "FALSE", "ASTERISK", 
		"SLASH", "New_Line", "Comment", "Whitespace", "Integer_Literal", "Real_Literal", 
		"String_Literal"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Compiler.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CompilerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CompilerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CompilerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class InputContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Input_sectionContext input_section() {
			return GetRuleContext<Input_sectionContext>(0);
		}
		public InputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitInput(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InputContext input() {
		InputContext _localctx = new InputContext(Context, State);
		EnterRule(_localctx, 0, RULE_input);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FALSE) | (1L << ASTERISK) | (1L << SLASH) | (1L << New_Line) | (1L << Comment) | (1L << Whitespace) | (1L << Integer_Literal) | (1L << Real_Literal) | (1L << String_Literal))) != 0)) {
				{
				State = 18;
				input_section();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_sectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Input_section_partContext[] input_section_part() {
			return GetRuleContexts<Input_section_partContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_section_partContext input_section_part(int i) {
			return GetRuleContext<Input_section_partContext>(i);
		}
		public Input_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_section; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterInput_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitInput_section(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_sectionContext input_section() {
		Input_sectionContext _localctx = new Input_sectionContext(Context, State);
		EnterRule(_localctx, 2, RULE_input_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 21;
				input_section_part();
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FALSE) | (1L << ASTERISK) | (1L << SLASH) | (1L << New_Line) | (1L << Comment) | (1L << Whitespace) | (1L << Integer_Literal) | (1L << Real_Literal) | (1L << String_Literal))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_section_partContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode New_Line() { return GetToken(CompilerParser.New_Line, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Input_elementContext[] input_element() {
			return GetRuleContexts<Input_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Input_elementContext input_element(int i) {
			return GetRuleContext<Input_elementContext>(i);
		}
		public Input_section_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_section_part; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterInput_section_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitInput_section_part(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_section_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_section_partContext input_section_part() {
		Input_section_partContext _localctx = new Input_section_partContext(Context, State);
		EnterRule(_localctx, 4, RULE_input_section_part);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << TRUE) | (1L << FALSE) | (1L << ASTERISK) | (1L << SLASH) | (1L << Comment) | (1L << Whitespace) | (1L << Integer_Literal) | (1L << Real_Literal) | (1L << String_Literal))) != 0)) {
				{
				{
				State = 26;
				input_element();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32;
			Match(New_Line);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Input_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Whitespace() { return GetToken(CompilerParser.Whitespace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(CompilerParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TokenContext token() {
			return GetRuleContext<TokenContext>(0);
		}
		public Input_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_input_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterInput_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitInput_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInput_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Input_elementContext input_element() {
		Input_elementContext _localctx = new Input_elementContext(Context, State);
		EnterRule(_localctx, 6, RULE_input_element);
		try {
			State = 37;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Whitespace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				Match(Whitespace);
				}
				break;
			case Comment:
				EnterOuterAlt(_localctx, 2);
				{
				State = 35;
				Match(Comment);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case TRUE:
			case FALSE:
			case ASTERISK:
			case SLASH:
			case Integer_Literal:
			case Real_Literal:
			case String_Literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 36;
				token();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(CompilerParser.Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(CompilerParser.Real_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(CompilerParser.String_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Operator_or_punctuatorContext operator_or_punctuator() {
			return GetRuleContext<Operator_or_punctuatorContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitToken(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitToken(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 8, RULE_token);
		try {
			State = 44;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 39;
				keyword();
				}
				break;
			case Integer_Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 40;
				Match(Integer_Literal);
				}
				break;
			case Real_Literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 41;
				Match(Real_Literal);
				}
				break;
			case String_Literal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 42;
				Match(String_Literal);
				}
				break;
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case ASTERISK:
			case SLASH:
				EnterOuterAlt(_localctx, 5);
				{
				State = 43;
				operator_or_punctuator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CompilerParser.FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CompilerParser.TRUE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 10, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << TRUE) | (1L << FALSE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer_Literal() { return GetToken(CompilerParser.Integer_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Real_Literal() { return GetToken(CompilerParser.Real_Literal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String_Literal() { return GetToken(CompilerParser.String_Literal, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 12, RULE_literal);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 48;
				boolean_literal();
				}
				break;
			case Integer_Literal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				Match(Integer_Literal);
				}
				break;
			case Real_Literal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 50;
				Match(Real_Literal);
				}
				break;
			case String_Literal:
				EnterOuterAlt(_localctx, 4);
				{
				State = 51;
				Match(String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE() { return GetToken(CompilerParser.TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE() { return GetToken(CompilerParser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 14, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			_la = TokenStream.LA(1);
			if ( !(_la==TRUE || _la==FALSE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_or_punctuatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASTERISK() { return GetToken(CompilerParser.ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(CompilerParser.SLASH, 0); }
		public Operator_or_punctuatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_or_punctuator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.EnterOperator_or_punctuator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ICompilerListener typedListener = listener as ICompilerListener;
			if (typedListener != null) typedListener.ExitOperator_or_punctuator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICompilerVisitor<TResult> typedVisitor = visitor as ICompilerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_or_punctuator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_or_punctuatorContext operator_or_punctuator() {
		Operator_or_punctuatorContext _localctx = new Operator_or_punctuatorContext(Context, State);
		EnterRule(_localctx, 16, RULE_operator_or_punctuator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << ASTERISK) | (1L << SLASH))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '+', '=', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', '\x4', 
		'\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x5', '\x2', 
		'\x16', '\n', '\x2', '\x3', '\x3', '\x6', '\x3', '\x19', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\x1A', '\x3', '\x4', '\a', '\x4', '\x1E', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '!', '\v', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'(', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '/', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x37', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x2', '\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', 
		'\x10', '\x12', '\x2', '\x5', '\x4', '\x2', '\x3', '\xF', '\"', '#', '\x3', 
		'\x2', '\"', '#', '\x4', '\x2', '\x10', '!', '$', '%', '\x2', '?', '\x2', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x4', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', '\x2', '\b', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\n', '.', '\x3', '\x2', '\x2', '\x2', '\f', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x36', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x12', ':', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', '\x15', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x17', '\x19', '\x5', '\x6', '\x4', 
		'\x2', '\x18', '\x17', '\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\a', '&', '\x2', '\x2', '#', '\a', '\x3', '\x2', 
		'\x2', '\x2', '$', '(', '\a', '(', '\x2', '\x2', '%', '(', '\a', '\'', 
		'\x2', '\x2', '&', '(', '\x5', '\n', '\x6', '\x2', '\'', '$', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '&', '\x3', 
		'\x2', '\x2', '\x2', '(', '\t', '\x3', '\x2', '\x2', '\x2', ')', '/', 
		'\x5', '\f', '\a', '\x2', '*', '/', '\a', ')', '\x2', '\x2', '+', '/', 
		'\a', '*', '\x2', '\x2', ',', '/', '\a', '+', '\x2', '\x2', '-', '/', 
		'\x5', '\x12', '\n', '\x2', '.', ')', '\x3', '\x2', '\x2', '\x2', '.', 
		'*', '\x3', '\x2', '\x2', '\x2', '.', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', ',', '\x3', '\x2', '\x2', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\v', '\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\t', '\x2', '\x2', 
		'\x2', '\x31', '\r', '\x3', '\x2', '\x2', '\x2', '\x32', '\x37', '\x5', 
		'\x10', '\t', '\x2', '\x33', '\x37', '\a', ')', '\x2', '\x2', '\x34', 
		'\x37', '\a', '*', '\x2', '\x2', '\x35', '\x37', '\a', '+', '\x2', '\x2', 
		'\x36', '\x32', '\x3', '\x2', '\x2', '\x2', '\x36', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x39', '\t', '\x3', '\x2', '\x2', '\x39', '\x11', '\x3', '\x2', 
		'\x2', '\x2', ':', ';', '\t', '\x4', '\x2', '\x2', ';', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x15', '\x1A', '\x1F', '\'', '.', '\x36',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
